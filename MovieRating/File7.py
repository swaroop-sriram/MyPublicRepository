from pyspark.sql import Rowfrom pyspark.sql import SparkSessionfrom pyspark.sql import SQLContextimport pyspark.sql.functions as psfspark = SparkSession \    .builder \    .appName("Hello") \    .config("World") \    .getOrCreate()sc = spark.sparkContextsqlContext = SQLContext(sc)ratings = spark.createDataFrame(    sc.textFile("ratings.dat").map(lambda l: l.split('::')),    ["viewerid","movieid","rating","epoch"])ratings.registerTempTable("ratings")movies = spark.createDataFrame(    sc.textFile("movies.dat").map(lambda l: l.split('::')),    ["movieid","moviename","genre"])movies.registerTempTable("movies")users = spark.createDataFrame(    sc.textFile("users.dat").map(lambda l: l.split('::')),    ["userid","gender","age","occupation","zipcode"])users.registerTempTable("users")highestRateMovie = sqlContext.sql(""" SELECT  row_number()  OVER (    ORDER BY b.moviename) AS position,  b.moviename             AS title,  round(a.avgrating,2)    AS avg_rating,  a.moviecount            AS total_ratingFROM (SELECT        movieid,        moviecount,        avgrating,        rownum      FROM (SELECT              movieid,              moviecount,              avgrating,              row_number()              OVER (                ORDER BY moviecount DESC) AS rownum            FROM (SELECT                    movieid,                    count(*)    AS moviecount,                    avg(rating) AS avgrating                  FROM ratings                  GROUP BY movieid                  HAVING count(*) >= 10) AS tt) AS tt1      WHERE tt1.rownum <= 10) AS a INNER JOIN movies b ON a.movieid = b.movieid""")# highestRateMovie.registerTempTable('highestRateMovie')# final_df= sqlContext.sql("select row_number() over(order by b.moviename) as position, b.moviename as title,  a.avgrating as avg_rating, a.moviecount as total_rating from highestRateMovie a inner join movies b on a.movieid=b.movieid")highestRateMovie.show(20,False)highestUserRating = sqlContext.sql(""" SELECT    viewerid,    usercountFROM (SELECT          viewerid,          count(*) AS usercount,          max(count(*))          OVER ()  AS maxcount      FROM ratings      GROUP BY viewerid) AS ttWHERE tt.maxcount = tt.usercount""")highestUserRating.registerTempTable('highestUserRating')final_df1 = sqlContext.sql("select b.age from highestUserRating a inner join users b on a.viewerid = b.userid")final_df1.show(20,False)# averageRatingComedy = sqlContext.sql(""" SELECT movieid from movies where upper(genre) like "%COMEDY%" """)# averageRatingComedy.registerTempTable('averageRatingComedy')# final_df2 = sqlContext.sql(""" SELECT tt2.userid,case tt2.occupation when 0 then "other"#   when 1 then "academic/educator"#   when  2 then "artist"#   WHEN  3 THEN "clerical/admin"#   WHEN  4 THEN  "college/grad student"#   WHEN  5 THEN  "customer service"#   WHEN  6 THEN  "doctor/health care"#   WHEN  7 THEN  "executive/managerial"#   WHEN  8 THEN  "farmer"#   WHEN  9 THEN  "homemaker"#   WHEN 10 THEN  "K-12 student"#   WHEN 11 THEN  "lawyer"#   WHEN 12 THEN  "programmer"#   WHEN 13 THEN  "retired"#   WHEN 14 THEN  "sales/marketing"#   WHEN 15 THEN  "scientist"#   WHEN 16 THEN  "self-employed"#   WHEN 17 THEN  "technician/engineer"#   WHEN 18 THEN  "tradesman/craftsman"#   WHEN 19 THEN  "unemployed"#   WHEN 20 THEN  "writer" END as occupation FROM (SELECT viewerid,maxavg from (SELECT b.viewerid as viewerid, avg(b.rating) as avg, max(avg(b.rating)) over() as maxavg  FROM averageRatingComedy a inner join ratings b on a.movieid = b.movieid GROUP BY b.viewerid) as tt where tt.maxavg = tt.avg) as tt1 inner join users tt2 on tt2.userid = tt1.viewerid """)# final_df2.show(20,False)# maleGenre = sqlContext.sql(""" SELECT userid from users where gender = 'M' """)# maleGenre.registerTempTable('maleGenre')# maleGenre1 = sqlContext.sql(""" SELECT tt1.movieid,tt1.rating FROM ratings tt1 inner join maleGenre tt2 on tt1.viewerid = tt2.userid  """)# maleGenre1.registerTempTable('maleGenre1')# final_df3 = sqlContext.sql(""" SELECT genre, maxavg as avg_rating FROM (SELECT avg(tt1.rating) as avg, max(avg(tt1.rating)) over() as maxavg, tt2.genre as genre FROM maleGenre1 tt1 inner join movies tt2 on tt2.movieid = tt1.movieid GROUP BY tt2.genre) as tt3 where tt3.avg = tt3.maxavg """)# final_df3.show(20,False)# maleRomantic = sqlContext.sql(""" SELECT avg(tt2.rating) as ratingsmale  FROM users tt1, ratings tt2, movies tt3 where tt1.gender = 'M' and upper(tt3.genre) like '%ROMANCE%' and tt2.viewerid = tt1.userid and tt3.movieid = tt2.movieid """)# femaleRomantic = sqlContext.sql(""" SELECT avg(tt2.rating) as ratingsfemale  FROM users tt1, ratings tt2, movies tt3 where tt1.gender = 'F' and upper(tt3.genre) like '%ROMANCE%' and tt2.viewerid = tt1.userid and tt3.movieid = tt2.movieid """)# maleRomantic.registerTempTable('maleRomantic')# femaleRomantic.registerTempTable('femaleRomantic')# final_df4 = sqlContext.sql(""" SELECT ratingsfemale, ratingsmale from maleRomantic cross join femaleRomantic """)# final_df4.show(20,False)